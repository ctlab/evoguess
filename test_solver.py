from numpy.random import RandomState

from instance.impl import StreamCipher

from instance.typings import AIG, CNF
from instance.typings._obs import Interval, VariablesList

from function.module.solver.impl.linear import Linear


consts = [[1, -2], [-1, 2], [3, -4], [-3, 4], [5, 6], [-5, -6], [7, -8], [-7, 8], [9, -10], [-9, 10], [11, -12], [-11, 12], [13, 14], [-13, -14], [15, 16], [-15, -16], [17, -18], [-17, 18], [19, -20], [-19, 20], [21, 22], [-21, -22], [23, 24], [-23, -24], [25, 26], [-25, -26], [27, 28], [-27, -28], [29, -30], [-29, 30], [31, 32], [-31, -32], [35, 36], [-35, -36], [37, 38], [-37, -38], [39, -40], [-39, 40], [41, -42], [-41, 42], [43, -44], [-43, 44], [45, 46], [-45, -46], [47, -48], [-47, 48], [49, -50], [-49, 50], [51, -52], [-51, 52], [53, -54], [-53, 54], [55, -56], [-55, 56], [57, -58], [-57, 58], [59, 60], [-59, -60], [61, 62], [-61, -62], [63, -64], [-63, 64], [1, 2, 3], [1, 2, -3], [1, -2, 3], [-1, 2, 3], [4, 5, 6], [4, 5, -6], [4, -5, 6], [-4, 5, 6], [7, 8, 9], [7, 8, -9], [7, -8, 9], [-7, 8, 9], [10, -11, -12], [-10, 11, -12], [-10, -11, 12], [-10, -11, -12], [13, -14, -15], [-13, 14, -15], [-13, -14, 15], [-13, -14, -15], [16, -17, -18], [-16, 17, -18], [-16, -17, 18], [-16, -17, -18], [19, -20, -21], [-19, 20, -21], [-19, -20, 21], [-19, -20, -21], [22, 23, 24], [22, 23, -24], [22, -23, 24], [-22, 23, 24], [25, -26, -27], [-25, 26, -27], [-25, -26, 27], [-25, -26, -27], [28, -29, -30], [-28, 29, -30], [-28, -29, 30], [-28, -29, -30], [31, 32, 33], [31, 32, -33], [31, -32, 33], [-31, 32, 33], [34, -35, -36], [-34, 35, -36], [-34, -35, 36], [-34, -35, -36], [37, -38, -39], [-37, 38, -39], [-37, -38, 39], [-37, -38, -39], [40, 41, 42], [40, 41, -42], [40, -41, 42], [-40, 41, 42], [43, 44, 45], [43, 44, -45], [43, -44, 45], [-43, 44, 45], [46, 47, 48], [46, 47, -48], [46, -47, 48], [-46, 47, 48], [49, 50, 51], [49, 50, -51], [49, -50, 51], [-49, 50, 51], [52, -53, -54], [-52, 53, -54], [-52, -53, 54], [-52, -53, -54], [55, 56, 57], [55, 56, -57], [55, -56, 57], [-55, 56, 57], [58, 59, 60], [58, 59, -60], [58, -59, 60], [-58, 59, 60], [61, -62, -63], [-61, 62, -63], [-61, -62, 63], [-61, -62, -63], [62, -63, -64], [-62, 63, -64], [-62, -63, 64], [-62, -63, -64], [1, -2, 3, -4], [1, -2, -3, -4], [-1, 2, -3, 4], [-1, 2, -3, -4], [-1, -2, 3, -4], [-1, -2, -3, 4], [5, 6, 7, 8], [5, 6, 7, -8], [5, 6, -7, 8], [5, 6, -7, -8], [5, -6, 7, 8], [5, -6, -7, 8], [-5, 6, 7, 8], [-5, 6, 7, -8], [-5, -6, 7, 8], [-5, -6, -7, -8], [9, -10, 11, -12], [9, -10, -11, -12], [-9, 10, -11, 12], [-9, 10, -11, -12], [-9, -10, 11, -12], [-9, -10, -11, 12], [13, -14, 15, -16], [13, -14, -15, -16], [-13, 14, -15, 16], [-13, 14, -15, -16], [-13, -14, 15, -16], [-13, -14, -15, 16], [17, -18, 19, -20], [17, -18, -19, -20], [-17, 18, -19, 20], [-17, 18, -19, -20], [-17, -18, 19, -20], [-17, -18, -19, 20], [21, -22, 23, -24], [21, -22, -23, -24], [-21, 22, -23, 24], [-21, 22, -23, -24], [-21, -22, 23, -24], [-21, -22, -23, 24], [25, -26, 27, -28], [25, -26, -27, -28], [-25, 26, -27, 28], [-25, 26, -27, -28], [-25, -26, 27, -28], [-25, -26, -27, 28], [29, -30, 31, -32], [29, -30, -31, -32], [-29, 30, -31, 32], [-29, 30, -31, -32], [-29, -30, 31, -32], [-29, -30, -31, 32], [33, -34, 35, -36], [33, -34, -35, -36], [-33, 34, -35, 36], [-33, 34, -35, -36], [-33, -34, 35, -36], [-33, -34, -35, 36], [37, -38, 39, -40], [37, -38, -39, -40], [-37, 38, -39, 40], [-37, 38, -39, -40], [-37, -38, 39, -40], [-37, -38, -39, 40], [41, -42, 43, -44], [41, -42, -43, -44], [-41, 42, -43, 44], [-41, 42, -43, -44], [-41, -42, 43, -44], [-41, -42, -43, 44], [49, -50, 51, -52], [49, -50, -51, -52], [-49, 50, -51, 52], [-49, 50, -51, -52], [-49, -50, 51, -52], [-49, -50, -51, 52], [53, -54, 55, -56], [53, -54, -55, -56], [-53, 54, -55, 56], [-53, 54, -55, -56], [-53, -54, 55, -56], [-53, -54, -55, 56], [57, 58, 59, 60], [57, 58, 59, -60], [57, 58, -59, 60], [57, 58, -59, -60], [57, -58, 59, 60], [57, -58, -59, 60], [-57, 58, 59, 60], [-57, 58, 59, -60], [-57, -58, 59, 60], [-57, -58, -59, -60], [61, -62, 63, -64], [61, -62, -63, -64], [-61, 62, -63, 64], [-61, 62, -63, -64], [-61, -62, 63, -64], [-61, -62, -63, 64]]
cnf = CNF('a5_1.cnf')

print(cnf.source([-1, 2, 3, -4, -5], consts))
exit(0)

solver = Linear()

instance = StreamCipher(
    supbs=Interval(start=1, length=177),
    input_set=Interval(start=1, length=177),
    output_set=VariablesList([1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 1273, 1276, 1279, 1282,
                              1285, 1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327,
                              1330, 1333, 1336, 1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 1372,
                              1375, 1378, 1381, 1384, 1387, 1390, 1393, 1396, 1399, 1402, 1405, 1408, 1411, 1414, 1417,
                              1420, 1423, 1426, 1429, 1432, 1435, 1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459, 1462,
                              1465, 1468, 1471, 1474, 1477, 1480, 1483, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507,
                              1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552,
                              1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582, 1585, 1588, 1591, 1594, 1597,
                              1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 1630, 1633, 1636, 1639, 1642,
                              1645, 1648, 1651, 1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 1678, 1681, 1684, 1687,
                              1690, 1693, 1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 1726, 1729, 1732,
                              1735, 1738, 1741, 1744, 1747, 1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 1774, 1777,
                              1780, 1783, 1786, 1789, 1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822,
                              1825, 1828, 1831, 1834, 1837]),
    cnf=AIG(path='linear/bivium-no-init_stream200.aig'),
)

# assumptions = []
assumptions = range(1, 30)

state = RandomState(seed=212)
supbs_vars = instance.supbs.variables()
output_vars = instance.output_set.variables()
supbs_values = state.randint(0, 2, size=len(supbs_vars))
supbs_assumptions = [2 * x + supbs_values[i] for i, x in enumerate(supbs_vars)]
_, _, solution = solver.solve(instance, supbs_assumptions)

extra_assumptions = []
for lit in solution:
    if lit // 2 in output_vars:
        extra_assumptions.append(lit)

assert len(extra_assumptions) == len(output_vars)

variables = instance.input_set.variables()
values = state.randint(0, 2, size=len(variables))
assumptions = [2 * x + values[i] for i, x in enumerate(variables)]
status, stats, _ = solver.solve(instance, assumptions + extra_assumptions)

print(status)

